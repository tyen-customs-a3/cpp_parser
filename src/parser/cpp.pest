WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ line_comment | block_comment }
line_comment = _{ "//" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

file = { SOI ~ statement* ~ EOI }
statement = _{ enum_block | class_def | delete_statement | property | standalone_macro | macro_declaration | macro_call_statement | WHITESPACE }

// Enums
enum_block = { "enum" ~ "{" ~ enum_values ~ "}" ~ ";" }
enum_values = _{ enum_value ~ ("," ~ enum_value)* ~ ","? }
enum_value = { (enum_identifier | integer) ~ "=" ~ integer }
integer = @{ "-"? ~ ASCII_DIGIT+ }

// Delete statement
delete_statement = { "delete" ~ identifier ~ ";" }

// Class definitions
class_def = { class_header ~ class_body? ~ ";" }
class_header = { "class" ~ class_identifier ~ (":" ~ class_identifier)? }
class_identifier = @{ macro_class_name | class_name }
class_name = @{ (ASCII_ALPHANUMERIC | "_")+ }
macro_class_name = @{ identifier ~ "(" ~ macro_parameters ~ ")" }
macro_parameters = @{ (!")" ~ ANY)* }
parent_name = @{ (ASCII_ALPHANUMERIC | "_")+ }
class_body = { "{" ~ class_content* ~ "}" }
class_content = _{ property | class_def | delete_statement | standalone_macro | macro_declaration | macro_call_statement | WHITESPACE }

// Properties
property = { property_name ~ array_suffix? ~ assignment_op ~ value ~ ";" }
property_name = @{ macro_property_name | identifier | numeric_identifier }
macro_property_name = @{ identifier ~ "(" ~ identifier ~ ")" }
numeric_identifier = @{ ASCII_DIGIT+ ~ (ASCII_ALPHANUMERIC | "_")* }
array_suffix = @{ "[" ~ "]" }
assignment_op = { "+=" | "=" }

// Standalone macro (like VERSION_CONFIG;)
standalone_macro = { identifier ~ ";" }

// Macro declaration (like PREP(functionName);)
macro_declaration = { macro_call ~ ";" }

// Standalone macro call (like PREP(changeBrightness);)
macro_call_statement = { macro_call ~ ";" }

// Values
value = { array | macro_call | string_literal | number | expression | any_identifier }
array = { "{" ~ (array_item ~ ("," ~ array_item)*)? ~ ","? ~ "}" }
array_item = _{ macro_call | string_literal | number | expression | any_identifier | array }
string_literal = @{ "\"" ~ (escaped_quote | (!"\"" ~ ANY))* ~ "\"" }
escaped_quote = { "\"\"" }
number = @{ "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
any_identifier = @{ (ASCII_ALPHANUMERIC | "_" | "\\")+ }
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_" | "\\")* }
enum_identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// Expression support for things like db-3, db+5, etc.
expression = @{ "db" ~ ("+" | "-") ~ ASCII_DIGIT+ | identifier ~ ("+" | "-") ~ (ASCII_DIGIT+ | identifier) }

// Macro support - enhanced to support nested macros
macro_call = { macro_name ~ "(" ~ macro_content ~ ")" }
macro_name = @{ 
    "LIST_" ~ ASCII_DIGIT+ 
    | "ECSTRING" 
    | "CSTRING" 
    | "QPATHTOF" 
    | "GVAR" 
    | "EGVAR" 
    | "QUOTE" 
    | "PREP" 
    | "COMPILE_SCRIPT" 
    | "COMPILE_FILE" 
    | "VERSION_CONFIG" 
    | (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* 
}
// Allow nested macros and any content inside macro params including calls, spaces, parens, etc.
macro_content = @{ (balanced_parens | (!")" ~ ANY))* }
// Support for balanced parentheses inside macro content
balanced_parens = _{ "(" ~ (balanced_parens | ((!("(") ~ !(")")) ~ ANY))* ~ ")" }